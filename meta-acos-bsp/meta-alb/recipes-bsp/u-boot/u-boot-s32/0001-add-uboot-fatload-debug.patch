From 2ea81ef7c1670609c6e9888499511cb40a997baa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E9=9F=A9=E6=B6=9B?= <hantao8209@163.com>
Date: Fri, 23 Aug 2024 17:44:20 +0800
Subject: [PATCH] add uboot fatload debug

On branch devtool
Changes to be committed:
	modified:   configs/s32g274ardb2_defconfig
	modified:   disk/part.c
	modified:   disk/part_efi.c
	modified:   include/log.h
	modified:   include/part_efi.h
---
 configs/s32g274ardb2_defconfig |  2 ++
 disk/part.c                    |  9 ++++--
 disk/part_efi.c                |  6 ++--
 env-default.txt                | 56 ++++++++++++++++++++++++++++++++++
 include/log.h                  |  3 +-
 5 files changed, 69 insertions(+), 7 deletions(-)
 create mode 100644 env-default.txt

diff --git a/configs/s32g274ardb2_defconfig b/configs/s32g274ardb2_defconfig
index 9c25ae79e4..8127421fca 100644
--- a/configs/s32g274ardb2_defconfig
+++ b/configs/s32g274ardb2_defconfig
@@ -5,8 +5,10 @@ CONFIG_SD_BOOT=y
 CONFIG_CMD_GPT=y
 CONFIG_CMD_GPT_RENAME=y
 CONFIG_CMD_UBI=y
+# CONFIG_CMD_UBIFS is not set
 CONFIG_PARTITION_TYPE_GUID=y
 CONFIG_NXP_HSE_SUPPORT=y
 CONFIG_TEE=y
 CONFIG_OPTEE=y
 # CONFIG_OPTEE_TA_AVB is not set
+CONFIG_LZO=y
diff --git a/disk/part.c b/disk/part.c
index 4cc2fc19f7..758c876f72 100644
--- a/disk/part.c
+++ b/disk/part.c
@@ -330,7 +330,7 @@ int part_get_info(struct blk_desc *dev_desc, int part,
 #ifdef CONFIG_PARTITION_TYPE_GUID
 	info->type_guid[0] = 0;
 #endif
-
+    printf("part_get_info inf info->name =%s,infor->bootable=%d,info-type=%s\n",info->name,info->bootable,info->type);
 	drv = part_driver_lookup_type(dev_desc);
 	if (!drv) {
 		debug("## Unknown partition table type %x\n",
@@ -442,6 +442,8 @@ int blk_get_device_part_str(const char *ifname, const char *dev_part_str,
 	int p;
 	int part;
 	disk_partition_t tmpinfo;
+    printf("ifname = %s dev_part_str=%s,allow_whole_dev=%d \n",ifname,dev_part_str
+                ,allow_whole_dev);
 
 #ifdef CONFIG_SANDBOX
 	/*
@@ -510,12 +512,12 @@ int blk_get_device_part_str(const char *ifname, const char *dev_part_str,
 	} else {
 		dev_str = dev_part_str;
 	}
-
+    printf("ifname=%s,dev_str=%s,(*dev_desc)->part_type=%d \n",ifname,dev_str,(*dev_desc)->part_type);
 	/* Look up the device */
 	dev = blk_get_device_by_str(ifname, dev_str, dev_desc);
 	if (dev < 0)
 		goto cleanup;
-
+	 printf("part_str=%s\n",part_str);
 	/* Convert partition ID string to number */
 	if (!part_str || !*part_str) {
 		part = PART_UNSPECIFIED;
@@ -577,6 +579,7 @@ int blk_get_device_part_str(const char *ifname, const char *dev_part_str,
 	 * If user didn't specify a partition number, or did specify something
 	 * other than "auto", use that partition number directly.
 	 */
+		printf("part != PART_AUTO %d\n",part);
 	if (part != PART_AUTO) {
 		ret = part_get_info(*dev_desc, part, info);
 		if (ret) {
diff --git a/disk/part_efi.c b/disk/part_efi.c
index b2e157d9c1..dce0456410 100644
--- a/disk/part_efi.c
+++ b/disk/part_efi.c
@@ -83,7 +83,7 @@ static int validate_gpt_header(gpt_header *gpt_h, lbaint_t lba,
 {
 	uint32_t crc32_backup = 0;
 	uint32_t calc_crc32;
-
+        printf("validate_gpt_header \n");
 	/* Check the GPT header signature */
 	if (le64_to_cpu(gpt_h->signature) != GPT_HEADER_SIGNATURE_UBOOT) {
 		printf("%s signature is wrong: 0x%llX != 0x%llX\n",
@@ -773,7 +773,7 @@ int is_valid_gpt_buf(struct blk_desc *dev_desc, void *buf)
 {
 	gpt_header *gpt_h;
 	gpt_entry *gpt_e;
-
+    printf("dev_desc->blksz = %d \n",dev_desc->blksz);
 	/* determine start of GPT Header in the buffer */
 	gpt_h = buf + (GPT_PRIMARY_PARTITION_TABLE_LBA *
 		       dev_desc->blksz);
@@ -797,7 +797,7 @@ int write_mbr_and_gpt_partitions(struct blk_desc *dev_desc, void *buf)
 	int gpt_e_blk_cnt;
 	lbaint_t lba;
 	int cnt;
-
+  printf("write_mbr_and_gpt_partitions \n");
 	if (is_valid_gpt_buf(dev_desc, buf))
 		return -1;
 
diff --git a/env-default.txt b/env-default.txt
new file mode 100644
index 0000000000..1e0d80ca83
--- /dev/null
+++ b/env-default.txt
@@ -0,0 +1,56 @@
+
+baudrate=115200
+bootargs=root=/dev/ram rw earlycon loglevel=7
+bootcmd=pfeng stop; mmc dev ${mmcdev}; if mmc rescan; then if run loadimage; then run mmcboot; else run netboot; fi; else run netboot;fi
+bootdelay=2
+boot_fdt=try
+boot_mtd=booti
+bootscript=echo Running bootscript from mmc ...; source
+console=ttyLF0
+ethact=eth_pfeng
+fdt_addr=0x83000000
+fdt_enable_hs400es=fdt addr ${fdt_addr}; fdt rm /soc/mmc no-1-8-v; fdt resize; 
+fdt_file=s32g274a-rdb2.dtb
+fdt_high=0xffffffffffffffff
+fdt_override=;
+flashbootargs=setenv bootargs console=${console},${baudrate} root=/dev/ram rw earlycon nohz=off coherent_pool=64M;setenv flashsize 0x04000000;
+flashboot=echo Booting from flash...; run flashbootargs;mtd read Kernel ${loadaddr};mtd read DTB ${fdt_addr};mtd read Rootfs ${ramdisk_addr};${boot_mtd} ${loadaddr} ${ramdisk_addr} ${fdt_addr};
+hwconfig=pcie0:mode=rc,clock=int;pcie1:mode=sgmii,clock=int,fmhz=125,xpcs_mode=both
+image=Image
+initrd_high=0xffffffffffffffff
+ipaddr=10.0.0.100
+jtagboot=echo Booting using jtag...; ${boot_mtd} ${loadaddr} ${ramdisk_addr} ${fdt_addr}
+jtagsdboot=echo Booting loading Linux with ramdisk from SD...; run loadimage; run loadramdisk; run loadfdt;${boot_mtd} ${loadaddr} ${ramdisk_addr} ${fdt_addr}
+loadaddr=0x80000000
+loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};
+loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}; run fdt_override;
+loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}
+loadtftpfdt=tftp ${fdt_addr} ${fdt_file};
+loadtftpimage=tftp ${loadaddr} ${image};
+mmcargs=setenv bootargs console=${console},${baudrate} security=selinux selinux=1 root=${mmcroot} earlycon nohz=off coherent_pool=64M
+mmcboot=echo Booting from mmc ...; run mmcargs; if run loadfdt; then ${boot_mtd} ${loadaddr} - ${fdt_addr}; else echo WARN: Cannot load the DT; fi;
+mmcdev=0
+mmcpart=1
+mmcroot=/dev/mmcblk0p2 rootwait rw
+netargs=setenv bootargs console=${console},${baudrate} root=/dev/nfs ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp earlycon nohz=off coherent_pool=64M
+netboot=echo Booting from net ...; run netargs; if test ${ip_dyn} = yes; then setenv get_cmd dhcp; else setenv get_cmd tftp; fi; ${get_cmd} ${image}; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then if ${get_cmd} ${fdt_addr} ${fdt_file}; then ${boot_mtd} ${loadaddr} - ${fdt_addr}; else if test ${boot_fdt} = try; then ${boot_mtd}; else echo WARN: Cannot load the DT; fi; fi; else ${boot_mtd}; fi;
+netmask=255.255.255.0
+nfsbootargs=setenv bootargs console=${console},${baudrate} root=/dev/nfs rw ip=${ipaddr}:${serverip}::${netmask}::eth0:off nfsroot=${serverip}:/tftpboot/rfs,nolock,v3,tcp earlycon nohz=off coherent_pool=64M
+nfsboot=echo Booting from net using tftp and nfs...; run nfsbootargs;run loadtftpimage; run loadtftpfdt;${boot_mtd} ${loadaddr} - ${fdt_addr};
+pfe1addr=00:01:be:be:ef:22
+pfe2addr=00:01:be:be:ef:33
+pfeaddr=00:01:be:be:ef:11
+pfengemac=1
+pfeng_mode=enable,sgmii,sgmii,none
+ramdisk_addr=0x90000000
+s32cc_gmac_mode=enable
+script=boot.scr
+serverip=10.0.0.1
+update_sd_firmware_filename=fip.s32
+update_sd_firmware=if test ${ip_dyn} = yes; then setenv get_cmd dhcp; else setenv get_cmd tftp; fi; if mmc dev ${mmcdev}; then if ${get_cmd} ${update_sd_firmware_filename}; then setexpr fw_sz ${filesize} / 0x200; setexpr fw_sz ${fw_sz} - 7; setexpr loadaddr ${loadaddr} + 0x1000; mmc write ${loadaddr} 0x8 ${fw_sz}; fi; fi
+ 	write_atf=sf probe 6:0; setenv image fip.s32-sdcard; run loadimage; sf erase 0x02000000 +${filesize}; sf write ${loadaddr} 0x02000000 ${filesize}; 
+ 	write_bootloader=sf probe 6:0; setenv image boot-loader; run loadimage; sf erase 0x0 +${filesize}; sf write ${loadaddr} 0x0 ${filesize};
+ 	write_m7_1_app=sf probe 6:0; setenv image m7_app_1.bin; run loadimage; sf erase 0x00600000 +${filesize};  sf write ${loadaddr} 0x00600000 ${filesize};
+ 	write_m7_2_app=sf probe 6:0; setenv image m7_app_2.bin; run loadimage; sf erase 0x00900000 +${filesize};  sf write ${loadaddr} 0x00900000 ${filesize};
+ 	write_m7_app=sf probe 6:0; setenv image m7_app.bin; run loadimage; sf erase 0x00300000 +${filesize};  sf write ${loadaddr} 0x00300000 ${filesize};
+write_qspi_flash_images=echo Updating QSPI flash images; run write_atf; run write_m7_app; run write_m7_1_app; run write_m7_2_app; run write_bootloader;
diff --git a/include/log.h b/include/log.h
index 678872fd0d..4046791bdf 100644
--- a/include/log.h
+++ b/include/log.h
@@ -131,7 +131,8 @@ static inline int _log_nop(enum log_category_t cat, enum log_level_t level,
 #else
 #define _LOG_DEBUG	0
 #endif
-
+#define _LOG_DEBUG 1
+#define _LOG_MAX_LEVEL CONFIG_VAL(LOG_MAX_LEVEL)
 /* Emit a log record if the level is less that the maximum */
 #define log(_cat, _level, _fmt, _args...) ({ \
 	int _l = _level; \
-- 
2.42.0

